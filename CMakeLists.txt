# Copyright: (C) 2017 iCub Facility, Istituto Italiano di Tecnologia
# Copy Policy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT

cmake_minimum_required(VERSION 3.5)
project(ihmc-ors-yarp)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

# Find YARP
find_package(YARP 2.3.70 REQUIRED)
# Find fastcdr to build messages generated by fastrtpsgen
find_package(fastcdr REQUIRED)

# Find Asio, required for opening sockets from C++
find_package(Asio REQUIRED)

# .idl generated messages require C++11
set(CMAKE_CXX_STANDARD 11)

#
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Add a target that regenerate the messages contained in the idl directory
# This target needs to be manually run, because in general we expect to
# commit the generated files to avoid depending on Java
add_custom_target(idl-regenerate-cxx)
# TODO(traversaro) : check if fastrtpsgen exist and is in the PATH
set(IDL_FILES idl/robotFeedback.idl
              idl/robotDesired.idl)
foreach(IDL_FILE ${IDL_FILES})
  add_custom_command(TARGET idl-regenerate-cxx
                     COMMAND fastrtpsgen -replace -d ${CMAKE_CURRENT_SOURCE_DIR}/autogenerated ${CMAKE_CURRENT_SOURCE_DIR}/${IDL_FILE}
                     COMMENT "Generating cxx files from ${IDL_FILE}"
                     WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
endforeach()

# Generate a static library of the generated IDL messages
# TODO(traversaro): This will fail as soon as a new message is added to IDL_FILES
set(IDL_GENERATED_FILES)
foreach(IDL_FILE ${IDL_FILES})
  set(IDL_FILENAME ${IDL_FILE})
  string(REGEX REPLACE "idl/" ""
         IDL_FILENAME ${IDL_FILENAME})
  string(REGEX REPLACE ".idl" ""
         IDL_FILENAME ${IDL_FILENAME})
  list(APPEND IDL_GENERATED_FILES autogenerated/${IDL_FILENAME}.cxx)
endforeach()
add_library(idl_messages STATIC ${IDL_GENERATED_FILES})
target_link_libraries(idl_messages PRIVATE fastcdr)
target_include_directories(idl_messages INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/autogenerated)



# Add the yarp device that interacts with YARP motor interface via C++
# and with IHMC-ORS software with DDS .idl messages
set(BUILD_SHARED_LIBS ON)
yarp_configure_plugins_installation(ihmc-ors-yarp)
set(YARP_DEVICE_NAME bridge_ihmc_ors)

yarp_prepare_plugin(${YARP_DEVICE_NAME} TYPE yarp::dev::BridgeIHMCORS
                                        INCLUDE BridgeIHMCORS.h
                                        CATEGORY device
                                        DEFAULT ON
                                        ADVANCED)

if (ENABLE_${YARP_DEVICE_NAME})

  yarp_add_plugin(${YARP_DEVICE_NAME}
                  src/BridgeIHMCORS.cpp
                  src/BridgeIHMCORS.h)

  target_include_directories(${YARP_DEVICE_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src)
  target_link_libraries(${YARP_DEVICE_NAME} YARP::YARP_OS
                                            YARP::YARP_dev
                                            YARP::YARP_init
                                            idl_messages)

  yarp_install(FILES src/${YARP_DEVICE_NAME}.ini
               COMPONENT runtime
               DESTINATION ${YARP_PLUGIN_MANIFESTS_INSTALL_DIR})

  if(MSVC)
    target_compile_definitions(${YARP_DEVICE_NAME} _USE_MATH_DEFINES)
  endif()

  yarp_install(TARGETS ${YARP_DEVICE_NAME}
               COMPONENT Runtime
               LIBRARY DESTINATION ${YARP_DYNAMIC_PLUGINS_INSTALL_DIR}
               ARCHIVE DESTINATION ${YARP_STATIC_PLUGINS_INSTALL_DIR})


endif()
