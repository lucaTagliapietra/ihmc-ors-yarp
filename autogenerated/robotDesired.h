// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file robotDesired.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _robotDesired_H_
#define _robotDesired_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(robotDesired_SOURCE)
#define robotDesired_DllAPI __declspec( dllexport )
#else
#define robotDesired_DllAPI __declspec( dllimport )
#endif // robotDesired_SOURCE
#else
#define robotDesired_DllAPI
#endif
#else
#define robotDesired_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace it
{
    namespace iit
    {
        namespace yarp
        {
            /*!
             * @brief This class represents the enumeration ORSControlMode defined by the user in the IDL file.
             * @ingroup ROBOTDESIRED
             */
            enum ORSControlMode : uint32_t
            {
                NOT_ENABLED,
                POSITION_CONTROL,
                TORQUE_CONTROL
            };
            /*!
             * @brief This class represents the structure JointDesired defined by the user in the IDL file.
             * @ingroup ROBOTDESIRED
             */
            class JointDesired
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport JointDesired();
                
                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~JointDesired();
                
                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object it::iit::yarp::JointDesired that will be copied.
                 */
                eProsima_user_DllExport JointDesired(const JointDesired &x);
                
                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object it::iit::yarp::JointDesired that will be copied.
                 */
                eProsima_user_DllExport JointDesired(JointDesired &&x);
                
                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object it::iit::yarp::JointDesired that will be copied.
                 */
                eProsima_user_DllExport JointDesired& operator=(const JointDesired &x);
                
                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object it::iit::yarp::JointDesired that will be copied.
                 */
                eProsima_user_DllExport JointDesired& operator=(JointDesired &&x);
                
                /*!
                 * @brief This function sets a value in member controlMode
                 * @param _controlMode New value for member controlMode
                 */
                inline eProsima_user_DllExport void controlMode(it::iit::yarp::ORSControlMode _controlMode)
                {
                    m_controlMode = _controlMode;
                }

                /*!
                 * @brief This function returns the value of member controlMode
                 * @return Value of member controlMode
                 */
                inline eProsima_user_DllExport it::iit::yarp::ORSControlMode controlMode() const
                {
                    return m_controlMode;
                }

                /*!
                 * @brief This function returns a reference to member controlMode
                 * @return Reference to member controlMode
                 */
                inline eProsima_user_DllExport it::iit::yarp::ORSControlMode& controlMode()
                {
                    return m_controlMode;
                }
                /*!
                 * @brief This function sets a value in member tau
                 * @param _tau New value for member tau
                 */
                inline eProsima_user_DllExport void tau(double _tau)
                {
                    m_tau = _tau;
                }

                /*!
                 * @brief This function returns the value of member tau
                 * @return Value of member tau
                 */
                inline eProsima_user_DllExport double tau() const
                {
                    return m_tau;
                }

                /*!
                 * @brief This function returns a reference to member tau
                 * @return Reference to member tau
                 */
                inline eProsima_user_DllExport double& tau()
                {
                    return m_tau;
                }
                /*!
                 * @brief This function sets a value in member kp
                 * @param _kp New value for member kp
                 */
                inline eProsima_user_DllExport void kp(double _kp)
                {
                    m_kp = _kp;
                }

                /*!
                 * @brief This function returns the value of member kp
                 * @return Value of member kp
                 */
                inline eProsima_user_DllExport double kp() const
                {
                    return m_kp;
                }

                /*!
                 * @brief This function returns a reference to member kp
                 * @return Reference to member kp
                 */
                inline eProsima_user_DllExport double& kp()
                {
                    return m_kp;
                }
                /*!
                 * @brief This function sets a value in member kd
                 * @param _kd New value for member kd
                 */
                inline eProsima_user_DllExport void kd(double _kd)
                {
                    m_kd = _kd;
                }

                /*!
                 * @brief This function returns the value of member kd
                 * @return Value of member kd
                 */
                inline eProsima_user_DllExport double kd() const
                {
                    return m_kd;
                }

                /*!
                 * @brief This function returns a reference to member kd
                 * @return Reference to member kd
                 */
                inline eProsima_user_DllExport double& kd()
                {
                    return m_kd;
                }
                /*!
                 * @brief This function sets a value in member qDesired
                 * @param _qDesired New value for member qDesired
                 */
                inline eProsima_user_DllExport void qDesired(double _qDesired)
                {
                    m_qDesired = _qDesired;
                }

                /*!
                 * @brief This function returns the value of member qDesired
                 * @return Value of member qDesired
                 */
                inline eProsima_user_DllExport double qDesired() const
                {
                    return m_qDesired;
                }

                /*!
                 * @brief This function returns a reference to member qDesired
                 * @return Reference to member qDesired
                 */
                inline eProsima_user_DllExport double& qDesired()
                {
                    return m_qDesired;
                }
                /*!
                 * @brief This function sets a value in member qdDesired
                 * @param _qdDesired New value for member qdDesired
                 */
                inline eProsima_user_DllExport void qdDesired(double _qdDesired)
                {
                    m_qdDesired = _qdDesired;
                }

                /*!
                 * @brief This function returns the value of member qdDesired
                 * @return Value of member qdDesired
                 */
                inline eProsima_user_DllExport double qdDesired() const
                {
                    return m_qdDesired;
                }

                /*!
                 * @brief This function returns a reference to member qdDesired
                 * @return Reference to member qdDesired
                 */
                inline eProsima_user_DllExport double& qdDesired()
                {
                    return m_qdDesired;
                }
                
                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const it::iit::yarp::JointDesired& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
                
            private:
                it::iit::yarp::ORSControlMode m_controlMode;
                double m_tau;
                double m_kp;
                double m_kd;
                double m_qDesired;
                double m_qdDesired;
            };
            /*!
             * @brief This class represents the structure RobotDesireds defined by the user in the IDL file.
             * @ingroup ROBOTDESIRED
             */
            class RobotDesireds
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport RobotDesireds();
                
                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~RobotDesireds();
                
                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object it::iit::yarp::RobotDesireds that will be copied.
                 */
                eProsima_user_DllExport RobotDesireds(const RobotDesireds &x);
                
                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object it::iit::yarp::RobotDesireds that will be copied.
                 */
                eProsima_user_DllExport RobotDesireds(RobotDesireds &&x);
                
                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object it::iit::yarp::RobotDesireds that will be copied.
                 */
                eProsima_user_DllExport RobotDesireds& operator=(const RobotDesireds &x);
                
                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object it::iit::yarp::RobotDesireds that will be copied.
                 */
                eProsima_user_DllExport RobotDesireds& operator=(RobotDesireds &&x);
                
                /*!
                 * @brief This function copies the value in member jointDesireds
                 * @param _jointDesireds New value to be copied in member jointDesireds
                 */
                inline eProsima_user_DllExport void jointDesireds(const std::vector<it::iit::yarp::JointDesired> &_jointDesireds)
                {
                    m_jointDesireds = _jointDesireds;
                }

                /*!
                 * @brief This function moves the value in member jointDesireds
                 * @param _jointDesireds New value to be moved in member jointDesireds
                 */
                inline eProsima_user_DllExport void jointDesireds(std::vector<it::iit::yarp::JointDesired> &&_jointDesireds)
                {
                    m_jointDesireds = std::move(_jointDesireds);
                }

                /*!
                 * @brief This function returns a constant reference to member jointDesireds
                 * @return Constant reference to member jointDesireds
                 */
                inline eProsima_user_DllExport const std::vector<it::iit::yarp::JointDesired>& jointDesireds() const
                {
                    return m_jointDesireds;
                }

                /*!
                 * @brief This function returns a reference to member jointDesireds
                 * @return Reference to member jointDesireds
                 */
                inline eProsima_user_DllExport std::vector<it::iit::yarp::JointDesired>& jointDesireds()
                {
                    return m_jointDesireds;
                }
                
                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const it::iit::yarp::RobotDesireds& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
                
            private:
                std::vector<it::iit::yarp::JointDesired> m_jointDesireds;
            };
        }
    }
}

#endif // _robotDesired_H_