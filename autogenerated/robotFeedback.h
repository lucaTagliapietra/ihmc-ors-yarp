// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file robotFeedback.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _robotFeedback_H_
#define _robotFeedback_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(robotFeedback_SOURCE)
#define robotFeedback_DllAPI __declspec( dllexport )
#else
#define robotFeedback_DllAPI __declspec( dllimport )
#endif // robotFeedback_SOURCE
#else
#define robotFeedback_DllAPI
#endif
#else
#define robotFeedback_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace it
{
    namespace iit
    {
        namespace yarp
        {
            /*!
             * @brief This class represents the structure JointState defined by the user in the IDL file.
             * @ingroup ROBOTFEEDBACK
             */
            class JointState
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport JointState();
                
                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~JointState();
                
                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object it::iit::yarp::JointState that will be copied.
                 */
                eProsima_user_DllExport JointState(const JointState &x);
                
                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object it::iit::yarp::JointState that will be copied.
                 */
                eProsima_user_DllExport JointState(JointState &&x);
                
                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object it::iit::yarp::JointState that will be copied.
                 */
                eProsima_user_DllExport JointState& operator=(const JointState &x);
                
                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object it::iit::yarp::JointState that will be copied.
                 */
                eProsima_user_DllExport JointState& operator=(JointState &&x);
                
                /*!
                 * @brief This function sets a value in member tau
                 * @param _tau New value for member tau
                 */
                inline eProsima_user_DllExport void tau(double _tau)
                {
                    m_tau = _tau;
                }

                /*!
                 * @brief This function returns the value of member tau
                 * @return Value of member tau
                 */
                inline eProsima_user_DllExport double tau() const
                {
                    return m_tau;
                }

                /*!
                 * @brief This function returns a reference to member tau
                 * @return Reference to member tau
                 */
                inline eProsima_user_DllExport double& tau()
                {
                    return m_tau;
                }
                /*!
                 * @brief This function sets a value in member q
                 * @param _q New value for member q
                 */
                inline eProsima_user_DllExport void q(double _q)
                {
                    m_q = _q;
                }

                /*!
                 * @brief This function returns the value of member q
                 * @return Value of member q
                 */
                inline eProsima_user_DllExport double q() const
                {
                    return m_q;
                }

                /*!
                 * @brief This function returns a reference to member q
                 * @return Reference to member q
                 */
                inline eProsima_user_DllExport double& q()
                {
                    return m_q;
                }
                /*!
                 * @brief This function sets a value in member qd
                 * @param _qd New value for member qd
                 */
                inline eProsima_user_DllExport void qd(double _qd)
                {
                    m_qd = _qd;
                }

                /*!
                 * @brief This function returns the value of member qd
                 * @return Value of member qd
                 */
                inline eProsima_user_DllExport double qd() const
                {
                    return m_qd;
                }

                /*!
                 * @brief This function returns a reference to member qd
                 * @return Reference to member qd
                 */
                inline eProsima_user_DllExport double& qd()
                {
                    return m_qd;
                }
                
                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const it::iit::yarp::JointState& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
                
            private:
                double m_tau;
                double m_q;
                double m_qd;
            };
            /*!
             * @brief This class represents the structure IMUState defined by the user in the IDL file.
             * @ingroup ROBOTFEEDBACK
             */
            class IMUState
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport IMUState();
                
                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~IMUState();
                
                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object it::iit::yarp::IMUState that will be copied.
                 */
                eProsima_user_DllExport IMUState(const IMUState &x);
                
                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object it::iit::yarp::IMUState that will be copied.
                 */
                eProsima_user_DllExport IMUState(IMUState &&x);
                
                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object it::iit::yarp::IMUState that will be copied.
                 */
                eProsima_user_DllExport IMUState& operator=(const IMUState &x);
                
                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object it::iit::yarp::IMUState that will be copied.
                 */
                eProsima_user_DllExport IMUState& operator=(IMUState &&x);
                
                /*!
                 * @brief This function sets a value in member xdd
                 * @param _xdd New value for member xdd
                 */
                inline eProsima_user_DllExport void xdd(double _xdd)
                {
                    m_xdd = _xdd;
                }

                /*!
                 * @brief This function returns the value of member xdd
                 * @return Value of member xdd
                 */
                inline eProsima_user_DllExport double xdd() const
                {
                    return m_xdd;
                }

                /*!
                 * @brief This function returns a reference to member xdd
                 * @return Reference to member xdd
                 */
                inline eProsima_user_DllExport double& xdd()
                {
                    return m_xdd;
                }
                /*!
                 * @brief This function sets a value in member ydd
                 * @param _ydd New value for member ydd
                 */
                inline eProsima_user_DllExport void ydd(double _ydd)
                {
                    m_ydd = _ydd;
                }

                /*!
                 * @brief This function returns the value of member ydd
                 * @return Value of member ydd
                 */
                inline eProsima_user_DllExport double ydd() const
                {
                    return m_ydd;
                }

                /*!
                 * @brief This function returns a reference to member ydd
                 * @return Reference to member ydd
                 */
                inline eProsima_user_DllExport double& ydd()
                {
                    return m_ydd;
                }
                /*!
                 * @brief This function sets a value in member zdd
                 * @param _zdd New value for member zdd
                 */
                inline eProsima_user_DllExport void zdd(double _zdd)
                {
                    m_zdd = _zdd;
                }

                /*!
                 * @brief This function returns the value of member zdd
                 * @return Value of member zdd
                 */
                inline eProsima_user_DllExport double zdd() const
                {
                    return m_zdd;
                }

                /*!
                 * @brief This function returns a reference to member zdd
                 * @return Reference to member zdd
                 */
                inline eProsima_user_DllExport double& zdd()
                {
                    return m_zdd;
                }
                /*!
                 * @brief This function sets a value in member wx
                 * @param _wx New value for member wx
                 */
                inline eProsima_user_DllExport void wx(double _wx)
                {
                    m_wx = _wx;
                }

                /*!
                 * @brief This function returns the value of member wx
                 * @return Value of member wx
                 */
                inline eProsima_user_DllExport double wx() const
                {
                    return m_wx;
                }

                /*!
                 * @brief This function returns a reference to member wx
                 * @return Reference to member wx
                 */
                inline eProsima_user_DllExport double& wx()
                {
                    return m_wx;
                }
                /*!
                 * @brief This function sets a value in member wy
                 * @param _wy New value for member wy
                 */
                inline eProsima_user_DllExport void wy(double _wy)
                {
                    m_wy = _wy;
                }

                /*!
                 * @brief This function returns the value of member wy
                 * @return Value of member wy
                 */
                inline eProsima_user_DllExport double wy() const
                {
                    return m_wy;
                }

                /*!
                 * @brief This function returns a reference to member wy
                 * @return Reference to member wy
                 */
                inline eProsima_user_DllExport double& wy()
                {
                    return m_wy;
                }
                /*!
                 * @brief This function sets a value in member wz
                 * @param _wz New value for member wz
                 */
                inline eProsima_user_DllExport void wz(double _wz)
                {
                    m_wz = _wz;
                }

                /*!
                 * @brief This function returns the value of member wz
                 * @return Value of member wz
                 */
                inline eProsima_user_DllExport double wz() const
                {
                    return m_wz;
                }

                /*!
                 * @brief This function returns a reference to member wz
                 * @return Reference to member wz
                 */
                inline eProsima_user_DllExport double& wz()
                {
                    return m_wz;
                }
                /*!
                 * @brief This function sets a value in member qs
                 * @param _qs New value for member qs
                 */
                inline eProsima_user_DllExport void qs(double _qs)
                {
                    m_qs = _qs;
                }

                /*!
                 * @brief This function returns the value of member qs
                 * @return Value of member qs
                 */
                inline eProsima_user_DllExport double qs() const
                {
                    return m_qs;
                }

                /*!
                 * @brief This function returns a reference to member qs
                 * @return Reference to member qs
                 */
                inline eProsima_user_DllExport double& qs()
                {
                    return m_qs;
                }
                /*!
                 * @brief This function sets a value in member qx
                 * @param _qx New value for member qx
                 */
                inline eProsima_user_DllExport void qx(double _qx)
                {
                    m_qx = _qx;
                }

                /*!
                 * @brief This function returns the value of member qx
                 * @return Value of member qx
                 */
                inline eProsima_user_DllExport double qx() const
                {
                    return m_qx;
                }

                /*!
                 * @brief This function returns a reference to member qx
                 * @return Reference to member qx
                 */
                inline eProsima_user_DllExport double& qx()
                {
                    return m_qx;
                }
                /*!
                 * @brief This function sets a value in member qy
                 * @param _qy New value for member qy
                 */
                inline eProsima_user_DllExport void qy(double _qy)
                {
                    m_qy = _qy;
                }

                /*!
                 * @brief This function returns the value of member qy
                 * @return Value of member qy
                 */
                inline eProsima_user_DllExport double qy() const
                {
                    return m_qy;
                }

                /*!
                 * @brief This function returns a reference to member qy
                 * @return Reference to member qy
                 */
                inline eProsima_user_DllExport double& qy()
                {
                    return m_qy;
                }
                /*!
                 * @brief This function sets a value in member qz
                 * @param _qz New value for member qz
                 */
                inline eProsima_user_DllExport void qz(double _qz)
                {
                    m_qz = _qz;
                }

                /*!
                 * @brief This function returns the value of member qz
                 * @return Value of member qz
                 */
                inline eProsima_user_DllExport double qz() const
                {
                    return m_qz;
                }

                /*!
                 * @brief This function returns a reference to member qz
                 * @return Reference to member qz
                 */
                inline eProsima_user_DllExport double& qz()
                {
                    return m_qz;
                }
                
                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const it::iit::yarp::IMUState& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
                
            private:
                double m_xdd;
                double m_ydd;
                double m_zdd;
                double m_wx;
                double m_wy;
                double m_wz;
                double m_qs;
                double m_qx;
                double m_qy;
                double m_qz;
            };
            /*!
             * @brief This class represents the structure ForceSensor defined by the user in the IDL file.
             * @ingroup ROBOTFEEDBACK
             */
            class ForceSensor
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport ForceSensor();
                
                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~ForceSensor();
                
                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object it::iit::yarp::ForceSensor that will be copied.
                 */
                eProsima_user_DllExport ForceSensor(const ForceSensor &x);
                
                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object it::iit::yarp::ForceSensor that will be copied.
                 */
                eProsima_user_DllExport ForceSensor(ForceSensor &&x);
                
                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object it::iit::yarp::ForceSensor that will be copied.
                 */
                eProsima_user_DllExport ForceSensor& operator=(const ForceSensor &x);
                
                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object it::iit::yarp::ForceSensor that will be copied.
                 */
                eProsima_user_DllExport ForceSensor& operator=(ForceSensor &&x);
                
                /*!
                 * @brief This function sets a value in member Fx
                 * @param _Fx New value for member Fx
                 */
                inline eProsima_user_DllExport void Fx(double _Fx)
                {
                    m_Fx = _Fx;
                }

                /*!
                 * @brief This function returns the value of member Fx
                 * @return Value of member Fx
                 */
                inline eProsima_user_DllExport double Fx() const
                {
                    return m_Fx;
                }

                /*!
                 * @brief This function returns a reference to member Fx
                 * @return Reference to member Fx
                 */
                inline eProsima_user_DllExport double& Fx()
                {
                    return m_Fx;
                }
                /*!
                 * @brief This function sets a value in member Fy
                 * @param _Fy New value for member Fy
                 */
                inline eProsima_user_DllExport void Fy(double _Fy)
                {
                    m_Fy = _Fy;
                }

                /*!
                 * @brief This function returns the value of member Fy
                 * @return Value of member Fy
                 */
                inline eProsima_user_DllExport double Fy() const
                {
                    return m_Fy;
                }

                /*!
                 * @brief This function returns a reference to member Fy
                 * @return Reference to member Fy
                 */
                inline eProsima_user_DllExport double& Fy()
                {
                    return m_Fy;
                }
                /*!
                 * @brief This function sets a value in member Fz
                 * @param _Fz New value for member Fz
                 */
                inline eProsima_user_DllExport void Fz(double _Fz)
                {
                    m_Fz = _Fz;
                }

                /*!
                 * @brief This function returns the value of member Fz
                 * @return Value of member Fz
                 */
                inline eProsima_user_DllExport double Fz() const
                {
                    return m_Fz;
                }

                /*!
                 * @brief This function returns a reference to member Fz
                 * @return Reference to member Fz
                 */
                inline eProsima_user_DllExport double& Fz()
                {
                    return m_Fz;
                }
                /*!
                 * @brief This function sets a value in member tauX
                 * @param _tauX New value for member tauX
                 */
                inline eProsima_user_DllExport void tauX(double _tauX)
                {
                    m_tauX = _tauX;
                }

                /*!
                 * @brief This function returns the value of member tauX
                 * @return Value of member tauX
                 */
                inline eProsima_user_DllExport double tauX() const
                {
                    return m_tauX;
                }

                /*!
                 * @brief This function returns a reference to member tauX
                 * @return Reference to member tauX
                 */
                inline eProsima_user_DllExport double& tauX()
                {
                    return m_tauX;
                }
                /*!
                 * @brief This function sets a value in member tauY
                 * @param _tauY New value for member tauY
                 */
                inline eProsima_user_DllExport void tauY(double _tauY)
                {
                    m_tauY = _tauY;
                }

                /*!
                 * @brief This function returns the value of member tauY
                 * @return Value of member tauY
                 */
                inline eProsima_user_DllExport double tauY() const
                {
                    return m_tauY;
                }

                /*!
                 * @brief This function returns a reference to member tauY
                 * @return Reference to member tauY
                 */
                inline eProsima_user_DllExport double& tauY()
                {
                    return m_tauY;
                }
                /*!
                 * @brief This function sets a value in member tauZ
                 * @param _tauZ New value for member tauZ
                 */
                inline eProsima_user_DllExport void tauZ(double _tauZ)
                {
                    m_tauZ = _tauZ;
                }

                /*!
                 * @brief This function returns the value of member tauZ
                 * @return Value of member tauZ
                 */
                inline eProsima_user_DllExport double tauZ() const
                {
                    return m_tauZ;
                }

                /*!
                 * @brief This function returns a reference to member tauZ
                 * @return Reference to member tauZ
                 */
                inline eProsima_user_DllExport double& tauZ()
                {
                    return m_tauZ;
                }
                
                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const it::iit::yarp::ForceSensor& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
                
            private:
                double m_Fx;
                double m_Fy;
                double m_Fz;
                double m_tauX;
                double m_tauY;
                double m_tauZ;
            };
            /*!
             * @brief This class represents the structure RobotFeedback defined by the user in the IDL file.
             * @ingroup ROBOTFEEDBACK
             */
            class RobotFeedback
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport RobotFeedback();
                
                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~RobotFeedback();
                
                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object it::iit::yarp::RobotFeedback that will be copied.
                 */
                eProsima_user_DllExport RobotFeedback(const RobotFeedback &x);
                
                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object it::iit::yarp::RobotFeedback that will be copied.
                 */
                eProsima_user_DllExport RobotFeedback(RobotFeedback &&x);
                
                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object it::iit::yarp::RobotFeedback that will be copied.
                 */
                eProsima_user_DllExport RobotFeedback& operator=(const RobotFeedback &x);
                
                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object it::iit::yarp::RobotFeedback that will be copied.
                 */
                eProsima_user_DllExport RobotFeedback& operator=(RobotFeedback &&x);
                
                /*!
                 * @brief This function sets a value in member timestampInNanoseconds
                 * @param _timestampInNanoseconds New value for member timestampInNanoseconds
                 */
                inline eProsima_user_DllExport void timestampInNanoseconds(int64_t _timestampInNanoseconds)
                {
                    m_timestampInNanoseconds = _timestampInNanoseconds;
                }

                /*!
                 * @brief This function returns the value of member timestampInNanoseconds
                 * @return Value of member timestampInNanoseconds
                 */
                inline eProsima_user_DllExport int64_t timestampInNanoseconds() const
                {
                    return m_timestampInNanoseconds;
                }

                /*!
                 * @brief This function returns a reference to member timestampInNanoseconds
                 * @return Reference to member timestampInNanoseconds
                 */
                inline eProsima_user_DllExport int64_t& timestampInNanoseconds()
                {
                    return m_timestampInNanoseconds;
                }
                /*!
                 * @brief This function copies the value in member jointStates
                 * @param _jointStates New value to be copied in member jointStates
                 */
                inline eProsima_user_DllExport void jointStates(const std::vector<it::iit::yarp::JointState> &_jointStates)
                {
                    m_jointStates = _jointStates;
                }

                /*!
                 * @brief This function moves the value in member jointStates
                 * @param _jointStates New value to be moved in member jointStates
                 */
                inline eProsima_user_DllExport void jointStates(std::vector<it::iit::yarp::JointState> &&_jointStates)
                {
                    m_jointStates = std::move(_jointStates);
                }

                /*!
                 * @brief This function returns a constant reference to member jointStates
                 * @return Constant reference to member jointStates
                 */
                inline eProsima_user_DllExport const std::vector<it::iit::yarp::JointState>& jointStates() const
                {
                    return m_jointStates;
                }

                /*!
                 * @brief This function returns a reference to member jointStates
                 * @return Reference to member jointStates
                 */
                inline eProsima_user_DllExport std::vector<it::iit::yarp::JointState>& jointStates()
                {
                    return m_jointStates;
                }
                /*!
                 * @brief This function copies the value in member imuStates
                 * @param _imuStates New value to be copied in member imuStates
                 */
                inline eProsima_user_DllExport void imuStates(const std::vector<it::iit::yarp::IMUState> &_imuStates)
                {
                    m_imuStates = _imuStates;
                }

                /*!
                 * @brief This function moves the value in member imuStates
                 * @param _imuStates New value to be moved in member imuStates
                 */
                inline eProsima_user_DllExport void imuStates(std::vector<it::iit::yarp::IMUState> &&_imuStates)
                {
                    m_imuStates = std::move(_imuStates);
                }

                /*!
                 * @brief This function returns a constant reference to member imuStates
                 * @return Constant reference to member imuStates
                 */
                inline eProsima_user_DllExport const std::vector<it::iit::yarp::IMUState>& imuStates() const
                {
                    return m_imuStates;
                }

                /*!
                 * @brief This function returns a reference to member imuStates
                 * @return Reference to member imuStates
                 */
                inline eProsima_user_DllExport std::vector<it::iit::yarp::IMUState>& imuStates()
                {
                    return m_imuStates;
                }
                /*!
                 * @brief This function copies the value in member forceSensors
                 * @param _forceSensors New value to be copied in member forceSensors
                 */
                inline eProsima_user_DllExport void forceSensors(const std::vector<it::iit::yarp::ForceSensor> &_forceSensors)
                {
                    m_forceSensors = _forceSensors;
                }

                /*!
                 * @brief This function moves the value in member forceSensors
                 * @param _forceSensors New value to be moved in member forceSensors
                 */
                inline eProsima_user_DllExport void forceSensors(std::vector<it::iit::yarp::ForceSensor> &&_forceSensors)
                {
                    m_forceSensors = std::move(_forceSensors);
                }

                /*!
                 * @brief This function returns a constant reference to member forceSensors
                 * @return Constant reference to member forceSensors
                 */
                inline eProsima_user_DllExport const std::vector<it::iit::yarp::ForceSensor>& forceSensors() const
                {
                    return m_forceSensors;
                }

                /*!
                 * @brief This function returns a reference to member forceSensors
                 * @return Reference to member forceSensors
                 */
                inline eProsima_user_DllExport std::vector<it::iit::yarp::ForceSensor>& forceSensors()
                {
                    return m_forceSensors;
                }
                
                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const it::iit::yarp::RobotFeedback& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
                
            private:
                int64_t m_timestampInNanoseconds;
                std::vector<it::iit::yarp::JointState> m_jointStates;
                std::vector<it::iit::yarp::IMUState> m_imuStates;
                std::vector<it::iit::yarp::ForceSensor> m_forceSensors;
            };
        }
    }
}

#endif // _robotFeedback_H_