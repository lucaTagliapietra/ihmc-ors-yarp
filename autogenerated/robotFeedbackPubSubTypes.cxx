// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file robotFeedbackPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "robotFeedbackPubSubTypes.h"

namespace it
{
    namespace iit
    {
        namespace yarp
        {
            jointStatePubSubType::jointStatePubSubType() {
                setName("it::iit::yarp::jointState");
                m_typeSize = (uint32_t)jointState::getMaxCdrSerializedSize() + 4 /*encapsulation*/;
                m_isGetKeyDefined = jointState::isKeyDefined();
                m_keyBuffer = (unsigned char*)malloc(jointState::getKeyMaxCdrSerializedSize()>16 ? jointState::getKeyMaxCdrSerializedSize() : 16);
            }

            jointStatePubSubType::~jointStatePubSubType() {
                if(m_keyBuffer!=nullptr)
                    free(m_keyBuffer);
            }

            bool jointStatePubSubType::serialize(void *data, SerializedPayload_t *payload) {
                jointState *p_type = (jointState*) data;
                eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
                eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                // Serialize encapsulation
                ser.serialize_encapsulation();

                try
                {
                    p_type->serialize(ser); // Serialize the object:
                }
                catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                {
                    return false;
                }

                payload->length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
                return true;
            }

            bool jointStatePubSubType::deserialize(SerializedPayload_t* payload, void* data) {
                jointState* p_type = (jointState*) data; 	//Convert DATA to pointer of your type
                eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); // Object that manages the raw buffer.
                eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                        eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                // Deserialize encapsulation.
                deser.read_encapsulation();
                payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                try
                {
                    p_type->deserialize(deser); //Deserialize the object:
                }
                catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                {
                    return false;
                }

                return true;
            }

            std::function<uint32_t()> jointStatePubSubType::getSerializedSizeProvider(void* data) {
                return [data]() -> uint32_t
                {
                    return (uint32_t)type::getCdrSerializedSize(*static_cast<jointState*>(data)) + 4 /*encapsulation*/;
                };
            }

            void* jointStatePubSubType::createData() {
                return (void*)new jointState();
            }

            void jointStatePubSubType::deleteData(void* data) {
                delete((jointState*)data);
            }

            bool jointStatePubSubType::getKey(void *data, InstanceHandle_t* handle) {
                if(!m_isGetKeyDefined)
                    return false;
                jointState* p_type = (jointState*) data;
                eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,jointState::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
                eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
                p_type->serializeKey(ser);
                if(jointState::getKeyMaxCdrSerializedSize()>16)	{
                    m_md5.init();
                    m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
                    m_md5.finalize();
                    for(uint8_t i = 0;i<16;++i)    	{
                        handle->value[i] = m_md5.digest[i];
                    }
                }
                else    {
                    for(uint8_t i = 0;i<16;++i)    	{
                        handle->value[i] = m_keyBuffer[i];
                    }
                }
                return true;
            }

            IMUStatePubSubType::IMUStatePubSubType() {
                setName("it::iit::yarp::IMUState");
                m_typeSize = (uint32_t)IMUState::getMaxCdrSerializedSize() + 4 /*encapsulation*/;
                m_isGetKeyDefined = IMUState::isKeyDefined();
                m_keyBuffer = (unsigned char*)malloc(IMUState::getKeyMaxCdrSerializedSize()>16 ? IMUState::getKeyMaxCdrSerializedSize() : 16);
            }

            IMUStatePubSubType::~IMUStatePubSubType() {
                if(m_keyBuffer!=nullptr)
                    free(m_keyBuffer);
            }

            bool IMUStatePubSubType::serialize(void *data, SerializedPayload_t *payload) {
                IMUState *p_type = (IMUState*) data;
                eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
                eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                // Serialize encapsulation
                ser.serialize_encapsulation();

                try
                {
                    p_type->serialize(ser); // Serialize the object:
                }
                catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                {
                    return false;
                }

                payload->length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
                return true;
            }

            bool IMUStatePubSubType::deserialize(SerializedPayload_t* payload, void* data) {
                IMUState* p_type = (IMUState*) data; 	//Convert DATA to pointer of your type
                eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); // Object that manages the raw buffer.
                eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                        eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                // Deserialize encapsulation.
                deser.read_encapsulation();
                payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                try
                {
                    p_type->deserialize(deser); //Deserialize the object:
                }
                catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                {
                    return false;
                }

                return true;
            }

            std::function<uint32_t()> IMUStatePubSubType::getSerializedSizeProvider(void* data) {
                return [data]() -> uint32_t
                {
                    return (uint32_t)type::getCdrSerializedSize(*static_cast<IMUState*>(data)) + 4 /*encapsulation*/;
                };
            }

            void* IMUStatePubSubType::createData() {
                return (void*)new IMUState();
            }

            void IMUStatePubSubType::deleteData(void* data) {
                delete((IMUState*)data);
            }

            bool IMUStatePubSubType::getKey(void *data, InstanceHandle_t* handle) {
                if(!m_isGetKeyDefined)
                    return false;
                IMUState* p_type = (IMUState*) data;
                eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,IMUState::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
                eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
                p_type->serializeKey(ser);
                if(IMUState::getKeyMaxCdrSerializedSize()>16)	{
                    m_md5.init();
                    m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
                    m_md5.finalize();
                    for(uint8_t i = 0;i<16;++i)    	{
                        handle->value[i] = m_md5.digest[i];
                    }
                }
                else    {
                    for(uint8_t i = 0;i<16;++i)    	{
                        handle->value[i] = m_keyBuffer[i];
                    }
                }
                return true;
            }

            ForceSensorPubSubType::ForceSensorPubSubType() {
                setName("it::iit::yarp::ForceSensor");
                m_typeSize = (uint32_t)ForceSensor::getMaxCdrSerializedSize() + 4 /*encapsulation*/;
                m_isGetKeyDefined = ForceSensor::isKeyDefined();
                m_keyBuffer = (unsigned char*)malloc(ForceSensor::getKeyMaxCdrSerializedSize()>16 ? ForceSensor::getKeyMaxCdrSerializedSize() : 16);
            }

            ForceSensorPubSubType::~ForceSensorPubSubType() {
                if(m_keyBuffer!=nullptr)
                    free(m_keyBuffer);
            }

            bool ForceSensorPubSubType::serialize(void *data, SerializedPayload_t *payload) {
                ForceSensor *p_type = (ForceSensor*) data;
                eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
                eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                // Serialize encapsulation
                ser.serialize_encapsulation();

                try
                {
                    p_type->serialize(ser); // Serialize the object:
                }
                catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                {
                    return false;
                }

                payload->length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
                return true;
            }

            bool ForceSensorPubSubType::deserialize(SerializedPayload_t* payload, void* data) {
                ForceSensor* p_type = (ForceSensor*) data; 	//Convert DATA to pointer of your type
                eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); // Object that manages the raw buffer.
                eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                        eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                // Deserialize encapsulation.
                deser.read_encapsulation();
                payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                try
                {
                    p_type->deserialize(deser); //Deserialize the object:
                }
                catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                {
                    return false;
                }

                return true;
            }

            std::function<uint32_t()> ForceSensorPubSubType::getSerializedSizeProvider(void* data) {
                return [data]() -> uint32_t
                {
                    return (uint32_t)type::getCdrSerializedSize(*static_cast<ForceSensor*>(data)) + 4 /*encapsulation*/;
                };
            }

            void* ForceSensorPubSubType::createData() {
                return (void*)new ForceSensor();
            }

            void ForceSensorPubSubType::deleteData(void* data) {
                delete((ForceSensor*)data);
            }

            bool ForceSensorPubSubType::getKey(void *data, InstanceHandle_t* handle) {
                if(!m_isGetKeyDefined)
                    return false;
                ForceSensor* p_type = (ForceSensor*) data;
                eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,ForceSensor::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
                eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
                p_type->serializeKey(ser);
                if(ForceSensor::getKeyMaxCdrSerializedSize()>16)	{
                    m_md5.init();
                    m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
                    m_md5.finalize();
                    for(uint8_t i = 0;i<16;++i)    	{
                        handle->value[i] = m_md5.digest[i];
                    }
                }
                else    {
                    for(uint8_t i = 0;i<16;++i)    	{
                        handle->value[i] = m_keyBuffer[i];
                    }
                }
                return true;
            }

            robotFeedbackPubSubType::robotFeedbackPubSubType() {
                setName("it::iit::yarp::robotFeedback");
                m_typeSize = (uint32_t)robotFeedback::getMaxCdrSerializedSize() + 4 /*encapsulation*/;
                m_isGetKeyDefined = robotFeedback::isKeyDefined();
                m_keyBuffer = (unsigned char*)malloc(robotFeedback::getKeyMaxCdrSerializedSize()>16 ? robotFeedback::getKeyMaxCdrSerializedSize() : 16);
            }

            robotFeedbackPubSubType::~robotFeedbackPubSubType() {
                if(m_keyBuffer!=nullptr)
                    free(m_keyBuffer);
            }

            bool robotFeedbackPubSubType::serialize(void *data, SerializedPayload_t *payload) {
                robotFeedback *p_type = (robotFeedback*) data;
                eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
                eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                // Serialize encapsulation
                ser.serialize_encapsulation();

                try
                {
                    p_type->serialize(ser); // Serialize the object:
                }
                catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                {
                    return false;
                }

                payload->length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
                return true;
            }

            bool robotFeedbackPubSubType::deserialize(SerializedPayload_t* payload, void* data) {
                robotFeedback* p_type = (robotFeedback*) data; 	//Convert DATA to pointer of your type
                eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); // Object that manages the raw buffer.
                eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                        eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                // Deserialize encapsulation.
                deser.read_encapsulation();
                payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                try
                {
                    p_type->deserialize(deser); //Deserialize the object:
                }
                catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                {
                    return false;
                }

                return true;
            }

            std::function<uint32_t()> robotFeedbackPubSubType::getSerializedSizeProvider(void* data) {
                return [data]() -> uint32_t
                {
                    return (uint32_t)type::getCdrSerializedSize(*static_cast<robotFeedback*>(data)) + 4 /*encapsulation*/;
                };
            }

            void* robotFeedbackPubSubType::createData() {
                return (void*)new robotFeedback();
            }

            void robotFeedbackPubSubType::deleteData(void* data) {
                delete((robotFeedback*)data);
            }

            bool robotFeedbackPubSubType::getKey(void *data, InstanceHandle_t* handle) {
                if(!m_isGetKeyDefined)
                    return false;
                robotFeedback* p_type = (robotFeedback*) data;
                eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,robotFeedback::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
                eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
                p_type->serializeKey(ser);
                if(robotFeedback::getKeyMaxCdrSerializedSize()>16)	{
                    m_md5.init();
                    m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
                    m_md5.finalize();
                    for(uint8_t i = 0;i<16;++i)    	{
                        handle->value[i] = m_md5.digest[i];
                    }
                }
                else    {
                    for(uint8_t i = 0;i<16;++i)    	{
                        handle->value[i] = m_keyBuffer[i];
                    }
                }
                return true;
            }


        } //End of namespace yarp

    } //End of namespace iit

} //End of namespace it
