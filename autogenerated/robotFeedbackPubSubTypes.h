// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file robotFeedbackPubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _ROBOTFEEDBACK_PUBSUBTYPES_H_
#define _ROBOTFEEDBACK_PUBSUBTYPES_H_

#include <fastrtps/TopicDataType.h>

using namespace eprosima::fastrtps;

#include "robotFeedback.h"

namespace it
{
    namespace iit
    {
        namespace yarp
        {
            /*!
             * @brief This class represents the TopicDataType of the type JointState defined by the user in the IDL file.
             * @ingroup ROBOTFEEDBACK
             */
            class JointStatePubSubType : public TopicDataType {
            public:
                    typedef JointState type;

            	JointStatePubSubType();
            	virtual ~JointStatePubSubType();
            	bool serialize(void *data, SerializedPayload_t *payload);
            	bool deserialize(SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
            /*!
             * @brief This class represents the TopicDataType of the type IMUState defined by the user in the IDL file.
             * @ingroup ROBOTFEEDBACK
             */
            class IMUStatePubSubType : public TopicDataType {
            public:
                    typedef IMUState type;

            	IMUStatePubSubType();
            	virtual ~IMUStatePubSubType();
            	bool serialize(void *data, SerializedPayload_t *payload);
            	bool deserialize(SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
            /*!
             * @brief This class represents the TopicDataType of the type ForceSensor defined by the user in the IDL file.
             * @ingroup ROBOTFEEDBACK
             */
            class ForceSensorPubSubType : public TopicDataType {
            public:
                    typedef ForceSensor type;

            	ForceSensorPubSubType();
            	virtual ~ForceSensorPubSubType();
            	bool serialize(void *data, SerializedPayload_t *payload);
            	bool deserialize(SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
            /*!
             * @brief This class represents the TopicDataType of the type RobotFeedback defined by the user in the IDL file.
             * @ingroup ROBOTFEEDBACK
             */
            class RobotFeedbackPubSubType : public TopicDataType {
            public:
                    typedef RobotFeedback type;

            	RobotFeedbackPubSubType();
            	virtual ~RobotFeedbackPubSubType();
            	bool serialize(void *data, SerializedPayload_t *payload);
            	bool deserialize(SerializedPayload_t *payload, void *data);
                    std::function<uint32_t()> getSerializedSizeProvider(void* data);
            	bool getKey(void *data, InstanceHandle_t *ihandle);
            	void* createData();
            	void deleteData(void * data);
            	MD5 m_md5;
            	unsigned char* m_keyBuffer;
            };
        }
    }
}

#endif // _robotFeedback_PUBSUBTYPE_H_